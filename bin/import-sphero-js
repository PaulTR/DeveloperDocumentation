#!/usr/bin/env node

/* eslint-env node */
/* eslint no-mixed-requires: 0, no-use-before-define: 0 */
/* globals Promise: true */

"use strict";

var Promise = require("bluebird");

var exec = Promise.promisify(require("child_process").exec),
    path = require("path");

var glob = Promise.promisify(require("glob")),
    dox = require("dox"),
    fs = Promise.promisifyAll(require("fs-extra"));

// constants
var REPO_URL = "git@github.com:orbotix/sphero.js.git",
    DEST_DIR = path.join(__dirname, "/../", "/src/content/imports/sphero-js"),
    TMP_DIR = path.join(__dirname, "/.sphero");

function main() {
  var repo = removeDir().then(clone);

  repo.catch(function(err) {
    console.error(err);
  });

  Promise.all([
    // extract examples
    repo.then(findExamples).then(addExamples),

    // extract device docs
    repo.then(findDevices).then(addDevices)
  ]).then(removeDir);
}

function removeDir() {
  return fs.removeAsync(TMP_DIR);
}

function clone() {
  console.log("cloning repo");
  return exec("git clone " + REPO_URL + " " + TMP_DIR);
}

function findExamples() {
  console.log("extracting examples");

  function extract(paths) {
    var examples = {};

    paths.forEach(function(file) {
      var name = file.replace(TMP_DIR + "/examples/", "").replace(".js", "");
      examples[name] = fs.readFileAsync(file, "utf-8");
    });

    return examples;
  }

  return glob(TMP_DIR + "/examples/**/*.js").then(extract);
}

function addExamples(examples) {
  function decorate(code) {
    return code
      .replace(/^/mg, "    ")
      .replace(/^\s+$/mg, "");
  }

  function write(name) {
    var dest = path.join(DEST_DIR, "examples", name + ".md");
    return function(example) { return fs.outputFileAsync(dest, example); };
  }

  var files = Object.keys(examples).map(function(name) {
    var example = examples[name];
    return example.then(decorate).then(write(name));
  });

  return Promise.all(files);
}

function findDevices() {
  console.log("extracting docs");
  function extract(paths) {
    var docs = {};

    paths.forEach(function(file) {
      var name = file.replace(TMP_DIR + "/lib/devices/", "").replace(".js", "");
      docs[name] = fs.readFileAsync(file, "utf-8").then(function(code) {
        return dox.parseComments(code, { raw: true, skipSingleStar: true });
      });
    });

    return docs;
  }

  return glob(TMP_DIR + "/lib/devices/*.js").then(extract);
}

function addDevices(docs) {
  function generate(blocks) {
    function isPublic(block) { return !block.isPrivate; }

    function title(doc) {
      return [
        "### ",
        doc.ctx.name + "(",
        doc.params.map(function(p) {
          return p.name;
        }).join(", "),
        ")"
      ].join("");
    }

    function description(doc) {
      return doc.description.full.replace(/\<br\s*\/\>/gi, " ").trim();
    }

    function params(doc) {
      return [
        "**Params:**",
        "",
        doc.params.map(function(p) {
          return [
            "- `", p.name, "` (", p.types.join("|"), ") ", p.description
          ].join("");
        }).join("\n")
      ].join("\n");
    }

    function code(doc) {
      var examples = doc.tags.filter(function(t) {
        return t.type === "example";
      }).map(function(t) { return t.string; });

      if (examples.length) {
        return [ "```", examples.join("\n\n"), "```" ].join("\n");
      }
    }

    return blocks.filter(isPublic).map(function(doc) {
      doc.params = doc.tags.filter(function(t) { return t.type === "param"; });
      return [
        title(doc),
        code(doc),
        description(doc),
        params(doc),
      ].join("\n\n");
    }).join("\n\n");
  }

  function write(name) {
    var dest = path.join(DEST_DIR, "devices", name + ".md");
    return function(contents) { return fs.outputFileAsync(dest, contents); };
  }

  var files = Object.keys(docs).map(function(name) {
    var page = docs[name];
    return page.then(generate).then(write(name));
  });

  return Promise.all(files);
}

main();

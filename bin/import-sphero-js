#!/usr/bin/env node
"use strict";

// dependencies
var exec = require("child_process").exec,
    path = require("path");

// external dependencies
var glob = require("glob").sync,
    dox = require("dox"),
    fs = require("fs-extra");

// constants
var REPO_URL = "git@github.com:orbotix/sphero.js.git",
    DEST_DIR = path.join(__dirname, "/../", "/src/content/imports/sphero-js"),
    TMP_DIR = path.join(__dirname, "/.sphero");

function main() {
  fs.removeSync(TMP_DIR);

  clone(function() {
    fs.removeSync(TMP_DIR);
  });
}

// dox helper methods
function getParams(doc) {
  return doc.tags.filter(function(tag) { return tag.type === "param"; });
}

var helpers = {
  params: function(doc) {
    var params = getParams(doc);

    return [
      "**Params:**",
      "",
      params.map(function(p) {
        return "- " + "`" + p.name + "`" + " (" + p.types.join("|") + ") " + p.description
      }).join("\n")
    ].join("\n")
  },

  title: function(doc) {
    var params = getParams(doc);

    var title = [
      doc.ctx.name + "(",
      params.map(function(param) {
        return param.name + " : " + param.types.join("|");
      }).join(", "),
      ")"
    ].join("");

    return "## " + title + "\n";
  },

  description: function(doc) {
    return doc.description.full
      .replace(/\<br\s*\/\>/gi, " ");
  }
};

function extract(callback) {
  var docs = {};

  // extract docs
  glob(TMP_DIR + "/lib/**/*.js").forEach(function(file) {
    var filename = file.replace(TMP_DIR + "/lib/", ""),
        code = fs.readFileSync(file, "utf8"),
        opts = { raw: true, skipSingleStar: true };

    docs[filename] = dox.parseComments(code, opts);
  });

  for (var f in docs) {
    if (/devices/.test(f)) {
      parse(f, docs[f]);
    }
  }

  callback();
}

function parse(file, docs) {
  log("parsing :", file);

  var body = [];

  docs.forEach(function(doc) {
    body.push([
      helpers.title(doc),
      helpers.description(doc),
      helpers.params(doc),
      ""
    ].join("\n"));
  });

  write(file.replace(/js$/, "md"), body.join("\n").trim());
}

function write(file, contents) {
  var dest = path.join(DEST_DIR, path.basename(file));
  fs.outputFileSync(dest, contents);
}

function clone(callback) {
  console.log("cloning repo");
  exec("git clone " + REPO_URL + " " + TMP_DIR, function(err) {
    if (err) {
      console.error(err);
      throw new Error("an error occured while cloning repo");
    }

    extract(callback);
  });
}

function log() {
  var args = [].slice.call(arguments);
  console.log.apply(null, ["  "].concat(args));
}

main();
